/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HealthRouteImport } from './routes/health'
import { Route as R404RouteImport } from './routes/404'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AiIndexRouteImport } from './routes/ai/index'
import { Route as AiRagRouteImport } from './routes/ai/rag'
import { Route as AiPromptRouteImport } from './routes/ai/prompt'
import { Route as AiChatRouteImport } from './routes/ai/chat'

const HealthRoute = HealthRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AiIndexRoute = AiIndexRouteImport.update({
  id: '/ai/',
  path: '/ai/',
  getParentRoute: () => rootRouteImport,
} as any)
const AiRagRoute = AiRagRouteImport.update({
  id: '/ai/rag',
  path: '/ai/rag',
  getParentRoute: () => rootRouteImport,
} as any)
const AiPromptRoute = AiPromptRouteImport.update({
  id: '/ai/prompt',
  path: '/ai/prompt',
  getParentRoute: () => rootRouteImport,
} as any)
const AiChatRoute = AiChatRouteImport.update({
  id: '/ai/chat',
  path: '/ai/chat',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/health': typeof HealthRoute
  '/ai/chat': typeof AiChatRoute
  '/ai/prompt': typeof AiPromptRoute
  '/ai/rag': typeof AiRagRoute
  '/ai': typeof AiIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/health': typeof HealthRoute
  '/ai/chat': typeof AiChatRoute
  '/ai/prompt': typeof AiPromptRoute
  '/ai/rag': typeof AiRagRoute
  '/ai': typeof AiIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/health': typeof HealthRoute
  '/ai/chat': typeof AiChatRoute
  '/ai/prompt': typeof AiPromptRoute
  '/ai/rag': typeof AiRagRoute
  '/ai/': typeof AiIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/health'
    | '/ai/chat'
    | '/ai/prompt'
    | '/ai/rag'
    | '/ai'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/404' | '/health' | '/ai/chat' | '/ai/prompt' | '/ai/rag' | '/ai'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/health'
    | '/ai/chat'
    | '/ai/prompt'
    | '/ai/rag'
    | '/ai/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  HealthRoute: typeof HealthRoute
  AiChatRoute: typeof AiChatRoute
  AiPromptRoute: typeof AiPromptRoute
  AiRagRoute: typeof AiRagRoute
  AiIndexRoute: typeof AiIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/health': {
      id: '/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai/': {
      id: '/ai/'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai/rag': {
      id: '/ai/rag'
      path: '/ai/rag'
      fullPath: '/ai/rag'
      preLoaderRoute: typeof AiRagRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai/prompt': {
      id: '/ai/prompt'
      path: '/ai/prompt'
      fullPath: '/ai/prompt'
      preLoaderRoute: typeof AiPromptRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai/chat': {
      id: '/ai/chat'
      path: '/ai/chat'
      fullPath: '/ai/chat'
      preLoaderRoute: typeof AiChatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  HealthRoute: HealthRoute,
  AiChatRoute: AiChatRoute,
  AiPromptRoute: AiPromptRoute,
  AiRagRoute: AiRagRoute,
  AiIndexRoute: AiIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
